/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.djames.kafka.streams.example.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PageviewEnriched extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4367396081158661605L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PageviewEnriched\",\"namespace\":\"org.djames.kafka.streams.example.model\",\"fields\":[{\"name\":\"userID\",\"type\":\"int\"},{\"name\":\"pageID\",\"type\":\"int\"},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"duration\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"category\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PageviewEnriched> ENCODER =
      new BinaryMessageEncoder<PageviewEnriched>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PageviewEnriched> DECODER =
      new BinaryMessageDecoder<PageviewEnriched>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PageviewEnriched> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PageviewEnriched> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PageviewEnriched> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PageviewEnriched>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PageviewEnriched to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PageviewEnriched from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PageviewEnriched instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PageviewEnriched fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private int userID;
   private int pageID;
   private long timestamp;
   private java.lang.Long duration;
   private java.lang.CharSequence category;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PageviewEnriched() {}

  /**
   * All-args constructor.
   * @param userID The new value for userID
   * @param pageID The new value for pageID
   * @param timestamp The new value for timestamp
   * @param duration The new value for duration
   * @param category The new value for category
   */
  public PageviewEnriched(java.lang.Integer userID, java.lang.Integer pageID, java.lang.Long timestamp, java.lang.Long duration, java.lang.CharSequence category) {
    this.userID = userID;
    this.pageID = pageID;
    this.timestamp = timestamp;
    this.duration = duration;
    this.category = category;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return userID;
    case 1: return pageID;
    case 2: return timestamp;
    case 3: return duration;
    case 4: return category;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: userID = (java.lang.Integer)value$; break;
    case 1: pageID = (java.lang.Integer)value$; break;
    case 2: timestamp = (java.lang.Long)value$; break;
    case 3: duration = (java.lang.Long)value$; break;
    case 4: category = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'userID' field.
   * @return The value of the 'userID' field.
   */
  public int getUserID() {
    return userID;
  }


  /**
   * Sets the value of the 'userID' field.
   * @param value the value to set.
   */
  public void setUserID(int value) {
    this.userID = value;
  }

  /**
   * Gets the value of the 'pageID' field.
   * @return The value of the 'pageID' field.
   */
  public int getPageID() {
    return pageID;
  }


  /**
   * Sets the value of the 'pageID' field.
   * @param value the value to set.
   */
  public void setPageID(int value) {
    this.pageID = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'duration' field.
   * @return The value of the 'duration' field.
   */
  public java.lang.Long getDuration() {
    return duration;
  }


  /**
   * Sets the value of the 'duration' field.
   * @param value the value to set.
   */
  public void setDuration(java.lang.Long value) {
    this.duration = value;
  }

  /**
   * Gets the value of the 'category' field.
   * @return The value of the 'category' field.
   */
  public java.lang.CharSequence getCategory() {
    return category;
  }


  /**
   * Sets the value of the 'category' field.
   * @param value the value to set.
   */
  public void setCategory(java.lang.CharSequence value) {
    this.category = value;
  }

  /**
   * Creates a new PageviewEnriched RecordBuilder.
   * @return A new PageviewEnriched RecordBuilder
   */
  public static org.djames.kafka.streams.example.model.PageviewEnriched.Builder newBuilder() {
    return new org.djames.kafka.streams.example.model.PageviewEnriched.Builder();
  }

  /**
   * Creates a new PageviewEnriched RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PageviewEnriched RecordBuilder
   */
  public static org.djames.kafka.streams.example.model.PageviewEnriched.Builder newBuilder(org.djames.kafka.streams.example.model.PageviewEnriched.Builder other) {
    if (other == null) {
      return new org.djames.kafka.streams.example.model.PageviewEnriched.Builder();
    } else {
      return new org.djames.kafka.streams.example.model.PageviewEnriched.Builder(other);
    }
  }

  /**
   * Creates a new PageviewEnriched RecordBuilder by copying an existing PageviewEnriched instance.
   * @param other The existing instance to copy.
   * @return A new PageviewEnriched RecordBuilder
   */
  public static org.djames.kafka.streams.example.model.PageviewEnriched.Builder newBuilder(org.djames.kafka.streams.example.model.PageviewEnriched other) {
    if (other == null) {
      return new org.djames.kafka.streams.example.model.PageviewEnriched.Builder();
    } else {
      return new org.djames.kafka.streams.example.model.PageviewEnriched.Builder(other);
    }
  }

  /**
   * RecordBuilder for PageviewEnriched instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PageviewEnriched>
    implements org.apache.avro.data.RecordBuilder<PageviewEnriched> {

    private int userID;
    private int pageID;
    private long timestamp;
    private java.lang.Long duration;
    private java.lang.CharSequence category;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.djames.kafka.streams.example.model.PageviewEnriched.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.userID)) {
        this.userID = data().deepCopy(fields()[0].schema(), other.userID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.pageID)) {
        this.pageID = data().deepCopy(fields()[1].schema(), other.pageID);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.duration)) {
        this.duration = data().deepCopy(fields()[3].schema(), other.duration);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.category)) {
        this.category = data().deepCopy(fields()[4].schema(), other.category);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing PageviewEnriched instance
     * @param other The existing instance to copy.
     */
    private Builder(org.djames.kafka.streams.example.model.PageviewEnriched other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.userID)) {
        this.userID = data().deepCopy(fields()[0].schema(), other.userID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pageID)) {
        this.pageID = data().deepCopy(fields()[1].schema(), other.pageID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.duration)) {
        this.duration = data().deepCopy(fields()[3].schema(), other.duration);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.category)) {
        this.category = data().deepCopy(fields()[4].schema(), other.category);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'userID' field.
      * @return The value.
      */
    public int getUserID() {
      return userID;
    }


    /**
      * Sets the value of the 'userID' field.
      * @param value The value of 'userID'.
      * @return This builder.
      */
    public org.djames.kafka.streams.example.model.PageviewEnriched.Builder setUserID(int value) {
      validate(fields()[0], value);
      this.userID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'userID' field has been set.
      * @return True if the 'userID' field has been set, false otherwise.
      */
    public boolean hasUserID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'userID' field.
      * @return This builder.
      */
    public org.djames.kafka.streams.example.model.PageviewEnriched.Builder clearUserID() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'pageID' field.
      * @return The value.
      */
    public int getPageID() {
      return pageID;
    }


    /**
      * Sets the value of the 'pageID' field.
      * @param value The value of 'pageID'.
      * @return This builder.
      */
    public org.djames.kafka.streams.example.model.PageviewEnriched.Builder setPageID(int value) {
      validate(fields()[1], value);
      this.pageID = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'pageID' field has been set.
      * @return True if the 'pageID' field has been set, false otherwise.
      */
    public boolean hasPageID() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'pageID' field.
      * @return This builder.
      */
    public org.djames.kafka.streams.example.model.PageviewEnriched.Builder clearPageID() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public org.djames.kafka.streams.example.model.PageviewEnriched.Builder setTimestamp(long value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public org.djames.kafka.streams.example.model.PageviewEnriched.Builder clearTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'duration' field.
      * @return The value.
      */
    public java.lang.Long getDuration() {
      return duration;
    }


    /**
      * Sets the value of the 'duration' field.
      * @param value The value of 'duration'.
      * @return This builder.
      */
    public org.djames.kafka.streams.example.model.PageviewEnriched.Builder setDuration(java.lang.Long value) {
      validate(fields()[3], value);
      this.duration = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'duration' field has been set.
      * @return True if the 'duration' field has been set, false otherwise.
      */
    public boolean hasDuration() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'duration' field.
      * @return This builder.
      */
    public org.djames.kafka.streams.example.model.PageviewEnriched.Builder clearDuration() {
      duration = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'category' field.
      * @return The value.
      */
    public java.lang.CharSequence getCategory() {
      return category;
    }


    /**
      * Sets the value of the 'category' field.
      * @param value The value of 'category'.
      * @return This builder.
      */
    public org.djames.kafka.streams.example.model.PageviewEnriched.Builder setCategory(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.category = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'category' field has been set.
      * @return True if the 'category' field has been set, false otherwise.
      */
    public boolean hasCategory() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'category' field.
      * @return This builder.
      */
    public org.djames.kafka.streams.example.model.PageviewEnriched.Builder clearCategory() {
      category = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PageviewEnriched build() {
      try {
        PageviewEnriched record = new PageviewEnriched();
        record.userID = fieldSetFlags()[0] ? this.userID : (java.lang.Integer) defaultValue(fields()[0]);
        record.pageID = fieldSetFlags()[1] ? this.pageID : (java.lang.Integer) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.lang.Long) defaultValue(fields()[2]);
        record.duration = fieldSetFlags()[3] ? this.duration : (java.lang.Long) defaultValue(fields()[3]);
        record.category = fieldSetFlags()[4] ? this.category : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PageviewEnriched>
    WRITER$ = (org.apache.avro.io.DatumWriter<PageviewEnriched>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PageviewEnriched>
    READER$ = (org.apache.avro.io.DatumReader<PageviewEnriched>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.userID);

    out.writeInt(this.pageID);

    out.writeLong(this.timestamp);

    if (this.duration == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.duration);
    }

    if (this.category == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.category);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.userID = in.readInt();

      this.pageID = in.readInt();

      this.timestamp = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.duration = null;
      } else {
        this.duration = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.category = null;
      } else {
        this.category = in.readString(this.category instanceof Utf8 ? (Utf8)this.category : null);
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.userID = in.readInt();
          break;

        case 1:
          this.pageID = in.readInt();
          break;

        case 2:
          this.timestamp = in.readLong();
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.duration = null;
          } else {
            this.duration = in.readLong();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.category = null;
          } else {
            this.category = in.readString(this.category instanceof Utf8 ? (Utf8)this.category : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










